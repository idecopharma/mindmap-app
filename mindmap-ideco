<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LẬP LƯỢC ĐỒ TRIỂN KHAI KẾ HOẠCH - MINDMAP - IDECO</title>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
            text-align: center;
        }
        h1 {
            color: #333;
            background-color: #ff0000;
            color: white;
            padding: 10px;
            border-radius: 5px;
            display: inline-block;
        }
        #mindmap {
            width: 100%;
            height: 600px;
            border: 1px solid #ccc;
            background-color: white;
            margin: 20px auto;
        }
        .controls, .info-form {
            margin-bottom: 20px;
            text-align: left;
        }
        .color-picker {
            margin-right: 10px;
        }
        label {
            display: inline-block;
            width: 100px;
        }
        input, select {
            margin-bottom: 10px;
        }
        .node-title {
            background-color: #ff0000;
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            display: inline-block;
            margin-bottom: 5px;
        }
        #chatbox-container {
            position: fixed;
            right: 20px;
            bottom: 20px;
            z-index: 1000;
        }
        .title-input {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>LẬP LƯỢC ĐỒ TRIỂN KHAI KẾ HOẠCH - MINDMAP - IDECO</h1>
    
    <div class="info-form">
        <span class="node-title">Người lập:</span>
        <input type="text" id="creator"><br>
        <span class="node-title">Bộ phận:</span>
        <input type="text" id="department"><br>
        <span class="node-title">Ngày lập:</span>
        <input type="date" id="date"><br>
        <span class="node-title">Email người nhận:</span>
        <input type="email" id="recipient" value="recipient@example.com"><br>
        <span class="node-title">Tiêu đề Mindmap:</span>
        <input type="text" id="mindmapTitle"><br>
    </div>

    <div class="controls">
        <button id="addNodeButton">Thêm nút mới</button>
        <button id="addConnectionButton">Thêm kết nối</button>
        <button id="editSelectedNodeButton">Sửa nút</button>
        <button id="deleteSelectedButton">Xóa đối tượng đã chọn</button>
        <input type="color" id="nodeColor" class="color-picker" value="#ffffff">
        <button id="changeNodeColorButton">Đổi màu nút</button>
        <input type="color" id="fontColor" class="color-picker" value="#000000">
        <button id="changeFontColorButton">Đổi màu chữ</button>
        <select id="nodeShape">
            <option value="box">Hình chữ nhật bo tròn</option>
            <option value="ellipse">Hình oval</option>
            <option value="square">Hình vuông</option>
        </select>
        <button id="changeNodeShapeButton">Đổi hình dạng nút</button>
        <select id="fontFamily">
            <option value="Arial">Arial</option>
            <option value="Helvetica">Helvetica</option>
            <option value="Times New Roman">Times New Roman</option>
            <option value="Courier">Courier</option>
            <option value="Verdana">Verdana</option>
        </select>
        <button id="changeFontFamilyButton">Đổi font chữ</button>
        <input type="number" id="fontSize" min="8" max="72" value="14">
        <button id="changeFontSizeButton">Đổi cỡ chữ</button>
        <button id="saveMindmapButton">Lưu Mindmap</button>
        <button id="loadMindmapButton">Tải Mindmap</button>
        <button id="exportImageButton">Xuất ảnh</button>
        <button id="exportPDFButton">Xuất PDF</button>
        <button id="sendEmailButton">Gửi Email</button>
    </div>
    <div id="mindmap"></div>
    
    <script>
       (function() {
            let nodes, edges, network;
            let isResizing = false;
            let resizingNode = null;
            let originalWidth, originalHeight;


        function initNetwork() {
            nodes = new vis.DataSet();
            edges = new vis.DataSet();

            let container = document.getElementById('mindmap');
            let data = {
                nodes: nodes,
                edges: edges
            };
            let options = {
                manipulation: {
                    enabled: true
                },
                physics: {
                    enabled: false
                },
                nodes: {
                    shape: 'box',
                    borderRadius: 10,
                    shapeProperties: {
                        useBorderWithImage: true
                    }
                },
                interaction: {
                    selectConnectedEdges: false
                },
                edges: {
                    smooth: {
                        type: 'continuous'
                    }
                }
            };
            network = new vis.Network(container, data, options);

            network.on("doubleClick", function(params) {
                if (params.nodes.length > 0) {
                    editNode(params.nodes[0]);
                }
            });

            network.on("select", function(params) {
                if (params.nodes.length > 0) {
                    let node = nodes.get(params.nodes[0]);
                    document.getElementById('nodeColor').value = node.color || '#ffffff';
                    document.getElementById('fontColor').value = node.font ? (node.font.color || '#000000') : '#000000';
                    document.getElementById('fontFamily').value = node.font ? (node.font.face || 'Arial') : 'Arial';
                    document.getElementById('fontSize').value = node.font ? (node.font.size || 14) : 14;
                }
            });

            network.on("dragStart", function(params) {
                if (params.nodes.length > 0) {
                    resizingNode = params.nodes[0];
                    let node = nodes.get(resizingNode);
                    originalWidth = node.width || 150;
                    originalHeight = node.height || 50;
                    isResizing = true;
                }
            });

            network.on("dragging", function(params) {
                if (isResizing && resizingNode) {
                    let node = nodes.get(resizingNode);
                    let dx = params.pointer.canvas.x - node.x;
                    let dy = params.pointer.canvas.y - node.y;
                    let newWidth = Math.max(50, originalWidth + dx * 2);
                    let newHeight = Math.max(50, originalHeight + dy * 2);
                    nodes.update({
                        id: resizingNode,
                        width: newWidth,
                        height: newHeight
                    });
                }
            });

            network.on("dragEnd", function(params) {
                isResizing = false;
                resizingNode = null;
            });
        }

        function addNode() {
            let label = prompt("Nhập nội dung cho nút mới:");
            if (label) {
                let newNodeId = Date.now();
                let newNode = {
                    id: newNodeId,
                    label: label,
                    color: document.getElementById('nodeColor').value,
                    shape: document.getElementById('nodeShape').value,
                    font: {
                        color: document.getElementById('fontColor').value,
                        face: document.getElementById('fontFamily').value,
                        size: parseInt(document.getElementById('fontSize').value)
                    },
                    width: 150,
                    height: 50
                };
                nodes.add(newNode);
                
                let viewPosition = network.getViewPosition();
                network.moveNode(newNodeId, viewPosition.x, viewPosition.y);
            }
        }

        function addConnection() {
            let fromId = prompt("Nhập ID nút nguồn:");
            let toId = prompt("Nhập ID nút đích:");
            if (fromId && toId) {
                edges.add({from: fromId, to: toId});
            }
        }

        function editSelectedNode() {
            let selectedNodes = network.getSelectedNodes();
            if (selectedNodes.length > 0) {
                editNode(selectedNodes[0]);
            } else {
                alert("Vui lòng chọn một nút để sửa.");
            }
        }

        function editNode(nodeId) {
            let node = nodes.get(nodeId);
            let newLabel = prompt("Sửa nội dung nút:", node.label);
            if (newLabel !== null) {
                nodes.update({id: nodeId, label: newLabel});
            }
        }

        function deleteSelected() {
            let selectedNodes = network.getSelectedNodes();
            let selectedEdges = network.getSelectedEdges();
            nodes.remove(selectedNodes);
            edges.remove(selectedEdges);
        }

        function changeNodeColor() {
            let selectedNodes = network.getSelectedNodes();
            let color = document.getElementById('nodeColor').value;
            selectedNodes.forEach(nodeId => {
                nodes.update({id: nodeId, color: color});
            });
        }

        function changeFontColor() {
            let selectedNodes = network.getSelectedNodes();
            let color = document.getElementById('fontColor').value;
            selectedNodes.forEach(nodeId => {
                let node = nodes.get(nodeId);
                let updatedFont = { ...node.font, color: color };
                nodes.update({id: nodeId, font: updatedFont});
            });
        }

        function changeNodeShape() {
            let selectedNodes = network.getSelectedNodes();
            let shape = document.getElementById('nodeShape').value;
            selectedNodes.forEach(nodeId => {
                nodes.update({id: nodeId, shape: shape});
            });
        }

        function changeFontFamily() {
            let selectedNodes = network.getSelectedNodes();
            let fontFamily = document.getElementById('fontFamily').value;
            selectedNodes.forEach(nodeId => {
                let node = nodes.get(nodeId);
                let updatedFont = { ...node.font, face: fontFamily };
                nodes.update({id: nodeId, font: updatedFont});
            });
        }

        function changeFontSize() {
            let selectedNodes = network.getSelectedNodes();
            let fontSize = parseInt(document.getElementById('fontSize').value);
            selectedNodes.forEach(nodeId => {
                let node = nodes.get(nodeId);
                let updatedFont = { ...node.font, size: fontSize };
                nodes.update({id: nodeId, font: updatedFont});
            });
        }

        function saveMindmap() {
            let data = {
                nodes: nodes.get(),
                edges: edges.get(),
                info: {
                    creator: document.getElementById('creator').value,
                    department: document.getElementById('department').value,
                    date: document.getElementById('date').value,
                    recipient: document.getElementById('recipient').value,
                    title: document.getElementById('mindmapTitle').value
                }
            };
            let json = JSON.stringify(data);
            localStorage.setItem('mindmap', json);
            alert("Mindmap đã được lưu!");
        }

        function loadMindmap() {
            let json = localStorage.getItem('mindmap');
            if (json) {
                let data = JSON.parse(json);
                nodes.clear();
                edges.clear();
                nodes.add(data.nodes);
                edges.add(data.edges);
                if (data.info) {
                    document.getElementById('creator').value = data.info.creator;
                    document.getElementById('department').value = data.info.department;
                    document.getElementById('date').value = data.info.date;
                    document.getElementById('recipient').value = data.info.recipient;
                    document.getElementById('mindmapTitle').value = data.info.title;
                }
                alert("Mindmap đã được tải!");
            } else {
                alert("Không tìm thấy Mindmap đã lưu!");
            }
        }

        function exportImage() {
            html2canvas(document.getElementById('mindmap')).then(function(canvas) {
                let link = document.createElement('a');
                link.download = 'mindmap.png';
                link.href = canvas.toDataURL();
                link.click();
            });
        }

        function exportPDF() {
            html2canvas(document.getElementById('mindmap')).then(function(canvas) {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('l', 'mm', 'a4');
                pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, 297, 210);
                pdf.save("mindmap.pdf");
            });
        }

        function sendEmail() {
            let recipient = document.getElementById('recipient').value;
            if (!recipient) {
                alert("Vui lòng nhập địa chỉ email người nhận!");
                return;
            }
            
            html2canvas(document.getElementById('mindmap')).then(function(canvas) {
                let imageData = canvas.toDataURL('image/png');
                let subject = "Mindmap - Lược đồ triển khai kế hoạch";
                let body = "Xin chào,\n\nĐính kèm là mindmap lược đồ triển khai kế hoạch.\n\nTrân trọng.";
                let mailtoLink = `mailto:${recipient}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
                
                let tempLink = document.createElement('a');
                tempLink.href = mailtoLink;
                tempLink.click();
            });
        }

         function addEventListeners() {
                document.getElementById('addNodeButton').addEventListener('click', addNode);
                document.getElementById('addConnectionButton').addEventListener('click', addConnection);
                document.getElementById('editSelectedNodeButton').addEventListener('click', editSelectedNode);
                document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelected);
                document.getElementById('changeNodeColorButton').addEventListener('click', changeNodeColor);
                document.getElementById('changeFontColorButton').addEventListener('click', changeFontColor);
                document.getElementById('changeNodeShapeButton').addEventListener('click', changeNodeShape);
                document.getElementById('changeFontFamilyButton').addEventListener('click', changeFontFamily);
                document.getElementById('changeFontSizeButton').addEventListener('click', changeFontSize);
                document.getElementById('saveMindmapButton').addEventListener('click', saveMindmap);
                document.getElementById('loadMindmapButton').addEventListener('click', loadMindmap);
                document.getElementById('exportImageButton').addEventListener('click', exportImage);
                document.getElementById('exportPDFButton').addEventListener('click', exportPDF);
                document.getElementById('sendEmailButton').addEventListener('click', sendEmail);
            }

            // Khởi tạo khi trang đã tải xong
            window.addEventListener('load', function() {
                initNetwork();
                addEventListeners();
            });
        })();
    </script>
</body>
</html>
